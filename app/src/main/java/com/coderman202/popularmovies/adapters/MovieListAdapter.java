package com.coderman202.popularmovies.adapters;

import android.content.Context;
import android.content.Intent;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.coderman202.popularmovies.DetailActivity;
import com.coderman202.popularmovies.R;
import com.coderman202.popularmovies.builders.ApiUrlBuilder;
import com.coderman202.popularmovies.model.Movie;
import com.coderman202.popularmovies.responses.MovieJsonResponse;
import com.squareup.picasso.Picasso;

import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by Reggie on 25/02/2018.
 * Custom adapter to handle the list of movies on the main screen.
 */

public class MovieListAdapter extends RecyclerView.Adapter<MovieListAdapter.ViewHolder> {

    private static final String LOG_TAG = MovieListAdapter.class.getSimpleName();

    private Context context;
    private List<Movie> movieList;

    public class ViewHolder extends RecyclerView.ViewHolder{

        @BindView(R.id.movie_list_poster_img)
        ImageView moviePosterView;

        public ViewHolder(View view){
            super(view);
            ButterKnife.bind(this, view);
        }
    }

    public MovieListAdapter(Context context){
        this.context = context;
    }

    /**
     * Called when RecyclerView needs a new {@link ViewHolder} of the given type to represent
     * an item.
     * <p>
     *
     * @param parent   The ViewGroup into which the new View will be added after it is bound to
     *                 an adapter position.
     * @param viewType The view type of the new View.
     * @return A new ViewHolder that holds a View of the given view type.
     * @see #getItemViewType(int)
     * @see #onBindViewHolder(ViewHolder, int)
     */
    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.movie_list_item,
                parent, false);
        return new ViewHolder(view);
    }

    /**
     * Called by RecyclerView to display the data at the specified position. This method should
     * update the contents of the {@link ViewHolder#itemView} to reflect the item at the given
     * position.
     * <p>
     * @param holder   The ViewHolder which should be updated to represent the contents of the
     *                 item at the given position in the data set.
     * @param position The position of the item within the adapter's data set.
     */
    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        final Movie movie = movieList.get(position);
        String posterUrlPath = movie.getPosterImageLink();

        if(!TextUtils.isEmpty(posterUrlPath)){
            posterUrlPath = ApiUrlBuilder.MOVIE_POSTER_PATH_BASE_URL + posterUrlPath;
            Picasso.with(context).load(posterUrlPath).into(holder.moviePosterView);
        }

        holder.moviePosterView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(context, DetailActivity.class);
                intent.putExtra(DetailActivity.MOVIE_ID_KEY, movie.getTmdbID());
                context.startActivity(intent);
            }
        });
    }

    /**
     * Returns the total number of items in the data set held by the adapter.
     *
     * @return The total number of items in this adapter.
     */
    @Override
    public int getItemCount() {
        if(movieList == null){
            return 0;
        }
        return movieList.size();
    }

    /**
     * Sets/refreshes movie list.
     *
     * @param movieList the movie list which is generated by the
     * {@link MovieJsonResponse} object.
     */
    public void setMovieList(List<Movie> movieList){
        this.movieList = movieList;
        notifyDataSetChanged();
    }
}
